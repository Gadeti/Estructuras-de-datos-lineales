import random

# Lista de ventas
class ListaVentas:
    def __init__(self):
        self.ventas = []

    def agregar(self, codigo, cantidad, precio):
        self.ventas.append([codigo, cantidad, precio])

    def vacia(self):
        return len(self.ventas) == 0

    def limpiar(self):
        self.ventas = []

# Poblar datos aleatorios
def poblar(lista):
    codigos = [random.randint(1000, 9999) for _ in range(20)]
    for _ in range(50):
        c = random.choice(codigos)
        cant = random.randint(1, 20)
        precio = round(random.uniform(10000, 100000), 2)
        lista.agregar(c, cant, precio)

# Mostrar datos
def mostrar(lista):
    if lista.vacia():
        print("Lista vacía.")
        return
    print("CÓDIGO\tCANTIDAD\tPRECIO")
    for v in lista.ventas:
        print(f"{v[0]}\t{v[1]}\t\t{v[2]:,.2f}")
    print()

# Totalizar ventas por código
def totalizar(entrada, salida):
    resumen = []  # [codigo, suma_cant, suma_precios, veces]
    for v in entrada.ventas:
        codigo, cant, precio = v
        enc = False
        for r in resumen:
            if r[0] == codigo:
                r[1] += cant
                r[2] += precio
                r[3] += 1
                enc = True
                break
        if not enc:
            resumen.append([codigo, cant, precio, 1])
    for r in resumen:
        cod, cant, suma, n = r
        prom = round(suma / n, 2)
        salida.agregar(cod, cant, prom)

# Ordenar por código (selección)
def ordenar(lista):
    n = len(lista.ventas)
    for i in range(n - 1):
        min_idx = i
        for j in range(i + 1, n):
            if lista.ventas[j][0] < lista.ventas[min_idx][0]:
                min_idx = j
        lista.ventas[i], lista.ventas[min_idx] = lista.ventas[min_idx], lista.ventas[i]

# Programa principal
def main():
    entrada = ListaVentas()
    salida = ListaVentas()

    poblar(entrada)
    print("VENTAS ORIGINALES:")
    mostrar(entrada)

    totalizar(entrada, salida)
    ordenar(salida)

    print("VENTAS TOTALIZADAS Y ORDENADAS:")
    mostrar(salida)

    entrada.limpiar()

# Ejecutar
if __name__ == "__main__":
    main()