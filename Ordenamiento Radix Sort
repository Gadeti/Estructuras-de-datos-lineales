def radix_sort_binario(lista):
    # Paso 1: Determinar la longitud máxima de las claves
    if not lista:
        return lista
    max_len = len(max(lista, key=len))

    # Igualar longitudes (rellenando con ceros a la izquierda)
    lista = [b.zfill(max_len) for b in lista]

    # Pasos 2–6: Para cada dígito, de LSD a MSD:
    #   2) Crear 2 cubetas (0 y 1)
    #   3) Distribuir cada clave según el valor del bit actual
    #   4) Recoger las cubetas en orden
    for i in range(max_len - 1, -1, -1):
        buckets = [[], []]                # dos cubetas: índices 0 y 1
        for key in lista:
            bit = int(key[i])             # extrae el bit (0 o 1)
            buckets[bit].append(key)      
        lista = [k for bucket in buckets for k in bucket]

    # Paso 7: La lista ya está ordenada (con ceros de padding)
    return lista


# Ejemplo de uso
if __name__ == "__main__":
    datos = ['101', '011', '1001', '000', '1110', '01', '1', '111']
    print("Original:", datos)
    print("Ordenado:", radix_sort_binario(datos))
